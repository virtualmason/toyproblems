//DEMO: https://codepen.io/virtualmason/pen/PdqERe?editors=1011
// Redux:
const ADD = 'ADD';
const DELETE = 'DELETE';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const deleteMessage = (index) => {
  return {
    type: DELETE,
    index: index
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    case DELETE:
      let newArr = [...state];
      let idx = action.index;
          
      let result = newArr.filter((c, i, a) =>
                                 
                      i !== idx         
      );
      
    return result;
      
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Change code below this line
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    this.setState({
      input: ''
    });
   this.props.submitNewMessage(this.state.input);
  }
  
  handleDelete(index, item) {
    this.setState({
      input: ''
    });
       this.props.submitDelete(index);

  }
  
  render() {
    return (
      <div>
        <h2>Type in a new list for Floyd:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.props.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message} <button style={{cursor: 'not-allowed', color:'red'}} onClick={this.handleDelete.bind(this, idx)}>delete</button></li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};
// Change code above this line

const mapStateToProps = (state) => {
  return {messages: state}
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message))
    },
      submitDelete: (index) => {
        console.log(index);
      dispatch(deleteMessage(index))
    }
  }
};


const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);

class AppWrapper extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};

ReactDOM.render(<AppWrapper />, document.getElementById('root'));